{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-trybewallet/src/component/formWallet.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { wallet } from '../actions';\nconst methodList = ['', 'Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst tagList = ['', 'Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass FormWallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n      exchangeRates: ''\n    };\n    this.createOptions = this.createOptions.bind(this);\n    this.createSelect = this.createSelect.bind(this);\n  }\n\n  createOptions() {\n    const {\n      listCurrenciesState\n    } = this.props;\n    return listCurrenciesState.map(element => /*#__PURE__*/React.createElement(\"option\", {\n      key: element,\n      value: element,\n      \"data-testid\": element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, element));\n  }\n\n  handleChange({\n    target\n  }) {\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick() {\n    const {\n      currencyValuesState: {\n        data\n      }\n    } = this.props;\n    const {\n      id\n    } = this.state;\n    this.setState({\n      id: id + 1,\n      exchangeRates: data\n    });\n    console.log(this.state);\n  }\n\n  createSelect(array) {\n    return array.map(element => /*#__PURE__*/React.createElement(\"option\", {\n      key: element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, element));\n  }\n\n  createInputs(name, type, data, onChange) {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      name: name,\n      id: name,\n      type: type,\n      \"data-testid\": data,\n      onChange: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Valor\", this.createInputs('value', 'text', 'value-input', this.handleChange.bind(this))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, \"Moeda\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"currency\",\n      id: \"currency\",\n      \"data-testid\": \" currency-input\",\n      onChange: this.handleChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, this.createOptions())), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"method\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"M\\xE9todo de pagamento\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"method\",\n      id: \"method\",\n      \"data-testid\": \"method-input\",\n      onChange: this.handleChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, this.createSelect(methodList))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"Tag\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"tag\",\n      id: \"tag\",\n      \"data-testid\": \"tag-input\",\n      onChange: this.handleChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, this.createSelect(tagList))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"Descri\\xE7\\xE3o\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"description\",\n      id: \"description\",\n      type: \"text\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  listCurrenciesState: state.wallet.currencies,\n  currencyValuesState: state.wallet.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  expensesDispatched: () => dispatch(wallet)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormWallet);\nFormWallet.propTypes = {\n  listCurrenciesState: PropTypes.func.isRequired,\n  expensesDispatched: PropTypes.objectOf.isRequired,\n  currencyValuesState: PropTypes.objectOf.isRequired\n};","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-trybewallet/src/component/formWallet.js"],"names":["React","PropTypes","connect","wallet","methodList","tagList","FormWallet","Component","constructor","props","state","id","value","description","currency","method","tag","exchangeRates","createOptions","bind","createSelect","listCurrenciesState","map","element","handleChange","target","name","setState","handleClick","currencyValuesState","data","console","log","array","createInputs","type","onChange","render","mapStateToProps","currencies","mapDispatchToProps","dispatch","expensesDispatched","propTypes","func","isRequired","objectOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { wallet } from '../actions';\n\nconst methodList = ['', 'Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst tagList = ['', 'Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass FormWallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n      exchangeRates: '',\n    };\n\n    this.createOptions = this.createOptions.bind(this);\n    this.createSelect = this.createSelect.bind(this);\n  }\n\n  createOptions() {\n    const { listCurrenciesState } = this.props;\n    return listCurrenciesState.map((element) => (\n      <option\n        key={ element }\n        value={ element }\n        data-testid={ element }\n      >\n        { element }\n      </option>\n    ));\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { currencyValuesState: { data } } = this.props;\n    const { id } = this.state;\n    this.setState({\n      id: id + 1,\n      exchangeRates: data,\n    });\n    console.log(this.state);\n  }\n\n  createSelect(array) {\n    return array.map((element) => (\n      <option key={ element }>{ element }</option>\n    ));\n  }\n\n  createInputs(name, type, data, onChange) {\n    return (<input\n      name={ name }\n      id={ name }\n      type={ type }\n      data-testid={ data }\n      onChange={ onChange }\n    />);\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          <label htmlFor=\"value\">\n            Valor\n            { this.createInputs('value', 'text', 'value-input', this.handleChange.bind(this)) }\n          </label>\n          <label htmlFor=\"currency\">\n            Moeda\n            <select name=\"currency\" id=\"currency\" data-testid=\" currency-input\"\n              onChange={ this.handleChange.bind(this) }>\n              { this.createOptions() }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Método de pagamento\n            <select name=\"method\" id=\"method\" data-testid=\"method-input\" onChange={ this.handleChange.bind(this) }>\n              { this.createSelect(methodList) }\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Tag\n            <select name=\"tag\" id=\"tag\" data-testid=\"tag-input\" onChange={ this.handleChange.bind(this) }>\n              { this.createSelect(tagList) }\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            Descrição\n            <input\n              name=\"description\"\n              id=\"description\"\n              type=\"text\"\n              data-testid=\"description-input\"\n              onChange={ this.handleChange.bind(this) }\n            />\n          </label>\n          <button type=\"button\" onClick={ this.handleClick.bind(this) }>\n            Adicionar despesa\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  listCurrenciesState: state.wallet.currencies,\n  currencyValuesState: state.wallet.data,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  expensesDispatched: () => dispatch(wallet),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormWallet);\n\nFormWallet.propTypes = {\n  listCurrenciesState: PropTypes.func.isRequired,\n  expensesDispatched: PropTypes.objectOf.isRequired,\n  currencyValuesState: PropTypes.objectOf.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}